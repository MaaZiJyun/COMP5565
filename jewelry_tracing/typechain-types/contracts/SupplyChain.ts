/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SupplyChain {
  export type SupplyChainRecordStruct = {
    timestamp: BigNumberish;
    actor: AddressLike;
    action: string;
    details: string;
  };

  export type SupplyChainRecordStructOutput = [
    timestamp: bigint,
    actor: string,
    action: string,
    details: string
  ] & { timestamp: bigint; actor: string; action: string; details: string };
}

export interface SupplyChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CUTTER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "JEWELER_ROLE"
      | "LAB_ROLE"
      | "MINER_ROLE"
      | "addSupplyChainRecord"
      | "certificateRegistry"
      | "getRoleAdmin"
      | "getSupplyChainHistory"
      | "grantRole"
      | "hasRole"
      | "jewelryNFT"
      | "renounceRole"
      | "revokeRole"
      | "supplyChainHistory"
      | "supportsInterface"
      | "transferJewelry"
      | "verifySupplyChain"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SupplyChainEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CUTTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JEWELER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LAB_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSupplyChainRecord",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "certificateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyChainHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jewelryNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyChainHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferJewelry",
    values: [BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySupplyChain",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CUTTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JEWELER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LAB_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MINER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupplyChainRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyChainHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jewelryNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyChainHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferJewelry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySupplyChain",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyChainEventEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    actor: AddressLike,
    action: string,
    details: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    actor: string,
    action: string,
    details: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    actor: string;
    action: string;
    details: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SupplyChain extends BaseContract {
  connect(runner?: ContractRunner | null): SupplyChain;
  waitForDeployment(): Promise<this>;

  interface: SupplyChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CUTTER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  JEWELER_ROLE: TypedContractMethod<[], [string], "view">;

  LAB_ROLE: TypedContractMethod<[], [string], "view">;

  MINER_ROLE: TypedContractMethod<[], [string], "view">;

  addSupplyChainRecord: TypedContractMethod<
    [tokenId: BigNumberish, action: string, details: string],
    [void],
    "nonpayable"
  >;

  certificateRegistry: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSupplyChainHistory: TypedContractMethod<
    [tokenId: BigNumberish],
    [SupplyChain.SupplyChainRecordStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  jewelryNFT: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supplyChainHistory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, string] & {
        timestamp: bigint;
        actor: string;
        action: string;
        details: string;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferJewelry: TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike, details: string],
    [void],
    "nonpayable"
  >;

  verifySupplyChain: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [boolean, boolean, boolean, boolean] & {
        hasMiningRecord: boolean;
        hasCuttingRecord: boolean;
        hasCertification: boolean;
        hasDesignRecord: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CUTTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "JEWELER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LAB_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addSupplyChainRecord"
  ): TypedContractMethod<
    [tokenId: BigNumberish, action: string, details: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certificateRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSupplyChainHistory"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [SupplyChain.SupplyChainRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "jewelryNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyChainHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, string] & {
        timestamp: bigint;
        actor: string;
        action: string;
        details: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferJewelry"
  ): TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike, details: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifySupplyChain"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [boolean, boolean, boolean, boolean] & {
        hasMiningRecord: boolean;
        hasCuttingRecord: boolean;
        hasCertification: boolean;
        hasDesignRecord: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SupplyChainEvent"
  ): TypedContractEvent<
    SupplyChainEventEvent.InputTuple,
    SupplyChainEventEvent.OutputTuple,
    SupplyChainEventEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SupplyChainEvent(uint256,address,string,string,uint256)": TypedContractEvent<
      SupplyChainEventEvent.InputTuple,
      SupplyChainEventEvent.OutputTuple,
      SupplyChainEventEvent.OutputObject
    >;
    SupplyChainEvent: TypedContractEvent<
      SupplyChainEventEvent.InputTuple,
      SupplyChainEventEvent.OutputTuple,
      SupplyChainEventEvent.OutputObject
    >;
  };
}
